const a = [1, 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
  , 1, 2, 2, 1, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 1, 2, 2, 3, 3, 3, 4, 5
]

function dedupe1 (arr) {
  return Array.from(new Set(arr))
}

console.time('dedupe1')
console.log(dedupe1(a))
console.timeEnd('dedupe1')


function dedupe2 (arr) {
  const tmp = []

  for (let i = 0; i < arr.length; i++) {
    if (tmp.includes(arr[i])) {
    } else {
      tmp.push(arr[i])
    }
  }
  return tmp
}

console.time('dedupe2')
console.log(dedupe2(a))
console.timeEnd('dedupe2')

function dedupe3 (arr) {
  const tmp = []

  for (let i = 0; i < arr.length; i++) {
    if (tmp.find(z => z === arr[i])) {
    } else {
      tmp.push(arr[i])
    }
  }
  return tmp
}

console.time('dedupe3')
console.log(dedupe3(a))
console.timeEnd('dedupe3')


function dedupe4 (arr) {
  const tmp = []

  arr.map(x => tmp.find(y => y === x) ? '' : tmp.push(x))
  return tmp
}

console.time('dedupe4')
console.log(dedupe4(a))
console.timeEnd('dedupe4')
